; all labels have `:show-truncated false` because of
; https://github.com/elkowar/eww/issues/1083

; optimize for laptop usage (based on env var)
(defvar is-laptop {get_env("IS_LAPTOP") == "1"})

(defpoll date :interval "1m"
  ; json string which eww can parse automatically (` = ' = ")
  :initial '{"date":"01.01.2000","day":"Monday"}'
  `LC_TIME=en_US.UTF-8 date '+{"date":"%d.%m.%y","day":"%A"}'`) 

(defpoll ram :interval "1s"
  ; in MB and percent
  :initial '{"total":0,"used":0,"used_percent":0}'
  "~/.config/eww/scripts/ram-usage.sh") 

(defpoll logarithmic-cpu :interval "1s"
  ; in percent
  :initial 0
  "~/.config/eww/scripts/logarithmic-cpu.sh") 

(defpoll battery :interval "5s"
  ; charge in percent
  :initial '{"charge":0,"time_remaining":"unknown","charging":false}'
  "~/.config/eww/scripts/battery.sh") 

(defpoll network :interval "5s"
  ; signal strength in percent
  :initial '{"internet":false,"wired":false,"signal_strength":0,"wifi_name":""}'
  "~/.config/eww/scripts/network.sh") 

(defpoll disk :interval "10s"
  ; disk usage in GB and percent
  :initial '{"total":"0G","used":"0G","available":"0G","used_percent":0}'
  "~/.config/eww/scripts/disk-usage.sh") 

(defpoll temperature :interval "5s"
  ; CPU temperature in Celsius
  :initial '{"temperature":0}'
  "~/.config/eww/scripts/temperature.sh") 

(defpoll system-load :interval "10s"
  ; system load averages and uptime
  :initial '{"load1":"0.00","load5":"0.00","load15":"0.00","uptime":"0m"}'
  "~/.config/eww/scripts/system-load.sh")  

(defpoll processes :interval "10s"
  ; process count information
  :initial '{"total":0,"running":0,"sleeping":0}'
  "~/.config/eww/scripts/processes.sh")

(defpoll current-language :interval "2s"
  ; current keyboard layout
  :initial "US"
  "~/.config/eww/scripts/current-language.sh")

(deflisten workspaces
  ; active and occupied hyprland workspaces for each monitor,
  ; e.g. {"HDMI-A-1":{"1":true},"DP-1":{"1":true}}
  :initial '{"DP-1":{"1":true,"2":false,"3":false,"4":false,"5":false,"6":false,"7":false,"8":false,"9":false}}'
  "~/.config/eww/scripts/workspaces/get-all.sh")

; monitor: name of monitor to watch workspaces, e.g. DP-1
; elevate: elevate the widget if true
(defwindow desktop [monitor elevate]
  :stacking {elevate ? "overlay" : "bottom"}
  :exclusive false ; dont reserve WM space
  :focusable false ; does not need keyboard input
  :namespace "eww-desktop-widget"
  :monitor "DP-1"
  :geometry (geometry
              :anchor "center"
              ; small window, stretches to fit content
              :width  "1%"
              :height "1%")
  (desktop :monitor monitor))

; Right panel like Windows taskbar
(defwindow right-panel
  :stacking "overlay"
  :exclusive false
  :focusable false
  :namespace "eww-right-panel"
  :monitor "DP-1"
  :geometry (geometry
              :anchor "top right"
              :width "50px"
              :height "100%")
  :backend_options (wayland
    :exclusive false
    :namespace "eww-right-panel")
  (right-panel)) 

; monitor: name of monitor to watch workspaces, e.g. DP-1
(defwidget desktop [monitor] 
  (box
    :class "main-box"
    :orientation "v"
    :space-evenly false
    :spacing -10
    (box
      :space-evenly false
      :spacing 15
      (eventbox
        :onscroll 'eww update is-laptop=${!is-laptop}'
        (box
          :space-evenly false
          :spacing 25
          (circular-battery)
          (circular-network)
          (circular-cpu)
          (circular-ram)))
      (label
        :show-truncated false
        :class "time"
        :text {formattime(EWW_TIME, "%R")}
        :tooltip {formattime(EWW_TIME, "%T")})
      (box
        :orientation "v"
        :spacing -50
        (overlay
          ; overlay with transparent longest possible value
          ; => visible box size always stays the same
          ; => no centering problems
          (label :show-truncated false :text "Wednesday" :style "color: transparent")
          (label :show-truncated false :text {date.day} :class "date-day"))
        (label :show-truncated false :text {date.date} :class "date")))
    (workspaces :monitor monitor)))

; monitor: name of monitor to watch workspaces, e.g. DP-1
(defwidget workspaces [monitor]
  (eventbox
    ; scroll through workspaces with direction like up/down and currently active workspace on that monitor
    :onscroll '~/.config/eww/scripts/workspaces/change-active.sh {} ${jq(workspaces[monitor], "to_entries | map(select(.value == true)) | .[0].key")}'
    (box
      :halign "center"
      :style "margin-left: -1px" ; better centering below ":" of time
      :space-evenly false
      :spacing 38
      ; for all workspaces per monitor
      (for i in '[1,2,3,4,5,6,7,8,9]'
        (eventbox
          :onclick 'hyprctl dispatch split:workspace ${i}'
          :tooltip {i}
          :class "workspace"
          (label
            :show-truncated false
            :style "padding-right: 0.25em"
            :text {workspaces[monitor][i] == "true"  ? "Û∞üí" :
                   workspaces[monitor][i] == "false" ? "Û∞ù•" : "Û∞Ñ∞"})))))) ; nerdfont characters

; Removed system-info-panel widget - no longer needed

; Right panel widget - System info only
(defwidget right-panel []
  (box
    :class "right-panel"
    :orientation "v"
    :halign "center"
    :valign "center"
    :spacing 20
    :style "padding: 20px 0;"
    ; System info - centered
    (box
      :class "system-info"
      :orientation "v"
      :halign "center"
      :spacing 20
      ; Disk usage
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üíæ" :style "font-size: 16px;")
        (label :text {disk.used_percent} :style "font-size: 12px;"))
      ; Temperature
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üå°Ô∏è" :style "font-size: 16px;")
        (label :text {temperature.temperature} :style "font-size: 12px;"))
      ; System load
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üìä" :style "font-size: 16px;")
        (label :text {system-load.load1} :style "font-size: 12px;"))
      ; Processes
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "‚öôÔ∏è" :style "font-size: 16px;")
        (label :text {processes.total} :style "font-size: 12px;"))
      ; Uptime
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "‚è±Ô∏è" :style "font-size: 16px;")
        (label :text {system-load.uptime} :style "font-size: 12px;"))
      ; RAM usage
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üíæ" :style "font-size: 16px;")
        (label :text {ram.used_percent} :style "font-size: 12px;"))
      ; CPU usage
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üñ•Ô∏è" :style "font-size: 16px;")
        (label :text {round(logarithmic-cpu, 1)} :style "font-size: 12px;"))
      ; Time
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label
          :show-truncated false
          :class "time-bottom"
          :text {formattime(EWW_TIME, "%R")}
          :tooltip {formattime(EWW_TIME, "%T")}))
      ; Date
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label
          :show-truncated false
          :class "date-bottom"
          :text {date.date}))
      ; Current Language
      (box
        :orientation "v"
        :halign "center"
        :spacing 3
        (label :text "üåê" :style "font-size: 16px;")
        (label :text {current-language} :style "font-size: 12px;")))))

(defwidget circular-cpu []
  (circular-progress-fancy
    :visible {!is-laptop}
    :tooltip '${round(EWW_CPU.avg, 2)}%'
    :value logarithmic-cpu
    :text "Ôíº" :style "padding-right: 0.35em" ; cpu nerdfont character
    :condition       {EWW_CPU.avg < 10}
    :condition-text '${round(EWW_CPU.avg, 1)}'))

(defwidget circular-ram []
  (circular-progress-fancy
    :visible {!is-laptop}
    :tooltip '${ram.used} / ${ram.total} MB'
    :value {ram.used_percent}
    :text "Óâ¶" :style "padding-right: 0.3em" ; memory chip nerdfont character
    :condition      {ram.used < 1000}
    :condition-text {ram.used}))

(defwidget circular-battery []
  (circular-progress-fancy
    :visible {is-laptop}
    :tooltip '${battery.charge}% (${battery.time_remaining} left${battery.charging ? " to charge" : ""})'
    :value {battery.charge}
    :style {battery.charging ? "padding-left: 0.1em" : ""}
    ; a lot of battery nerdfont characters incoming
    :text {battery.charging ? (
      battery.charge < 10 ? "Û∞¢ü" :
      battery.charge < 20 ? "Û∞¢ú" :
      battery.charge < 30 ? "Û∞ÇÜ" :
      battery.charge < 40 ? "Û∞Çá" :
      battery.charge < 50 ? "Û∞Çà" :
      battery.charge < 60 ? "Û∞¢ù" :
      battery.charge < 70 ? "Û∞Çâ" :
      battery.charge < 80 ? "Û∞¢û" :
      battery.charge < 90 ? "Û∞Çä" :
      battery.charge < 95 ? "Û∞Çã" : "Û∞ÇÖ"
    ) : (
      battery.charge < 10 ? "Û∞Çé" :
      battery.charge < 20 ? "Û∞Å∫" :
      battery.charge < 30 ? "Û∞Åª" :
      battery.charge < 40 ? "Û∞Åº" :
      battery.charge < 50 ? "Û∞ÅΩ" :
      battery.charge < 60 ? "Û∞Åæ" :
      battery.charge < 70 ? "Û∞Åø" :
      battery.charge < 80 ? "Û∞ÇÄ" :
      battery.charge < 90 ? "Û∞ÇÅ" :
      battery.charge < 95 ? "Û∞ÇÇ" : "Û∞Åπ" )}))

(defwidget circular-network []
  (circular-progress-fancy
    :visible {is-laptop}
    :tooltip {!network.internet ? "no connection" : (
      network.wired ? "wired connection" :
        'connected to ${network.wifi_name} (${network.signal_strength}% signal strength)')}
    :value {network.signal_strength}
    :style 'padding-right: 0.${network.internet && !network.wired ? 3 : 2}em'
    ; network nerdfont characters incoming
    :text {!network.internet ? "Ó¨Å" : (
      network.wired ? "Û∞àÄ" : (
        network.signal_strength < 20 ? "Û∞§Ø" :
        network.signal_strength < 40 ? "Û∞§ü" :
        network.signal_strength < 60 ? "Û∞§¢" :
        network.signal_strength < 80 ? "Û∞§•" : "Û∞§®" ))}))

(defwidget circular-progress-fancy [value text ?tooltip ?condition ?condition-text ?style ?visible]
  (overlay
    :visible {visible ?: true}
    :tooltip tooltip
    (circular-progress
      :class "inner-circle"
      :value 100
      :thickness 25)
    (circular-progress
      :class "outer-circle"
      :value value
      :start-at 75
      :thickness 3)
    (revealer
      :reveal {!(condition ?: false)}
      (label
        :show-truncated false
        :text text
        :style style))
    (revealer
      :reveal {condition ?: false}
      (label
        :show-truncated false
        :text condition-text
        :class "circle-condition-text"))))